We all know how to play connect four. Two players take turns dropping checkers in selected columns and whoever gets a combo of 4 wins. Combos can be made diagonally upwards, diagonally downwards, horizontally and vertically. Simple, right? But my game has a catch. In every turn, a specific column number will be blocked and the player won’t be able to drop a checker in that column. This slightly increases the difficulty of the game! 

I started by thinking about what a player has. A player will input his/her name, so I created a class with a private attribute name. I then thought ahead and realized that I will eventually have to compare slots and see whether the player made a combo of four. In order to do this, my first solution was to create a 2-D array of booleans to keep track of which slots were occupied by this specific player. To wrap up the Player class, I defined the setters and getters. This isn’t completely necessary as I could just compare if the slot is a ‘O’ or a ‘X’, but if in the future I were to play around and add more features it would be useful to know which slots a player occupied.

Connect four would also need a grid to play on and display. I created a new class called Game with private attributes grid, width and height. When displaying the grid, I display the empty slots with ‘.’ for visual purposes.

The key point of designing the game is in checking diagonals. I started by checking the upward diagonal by first verifying if a diagonal existed that ended in coordinates (0, 3). Since we only have combos of length 4, there is no point in checking combos that end in coordinates before width 3. After I traverse and don’t find any combos that end in column 3, I start shifting the diagonal line to the right and checking if there are combos in that area. Similarly, this applies to the downward diagonal combo. 

Some edge cases include drawing the game. This happens when neither player completes a combo and all slots are filled with checkers.